title: Intersection of two unsorted arrays
description: |
  Given 2 sorted array of integers, find the elements that exist in both arrays. 
  &nbsp;

  1. The arrays might have duplicate numbers.
  1. The order of returning result doesn't matter. 
  1. What is the **time** & **space** cost of your approach? Could you improve it?"
category: JavaScript
tags: [array]
difficulty: easy
files:
  - name: index.js
    content: |
      /**
      * @param {any[]} arr1
      * @param {any[]} arr2
      * @returns {any[]}
      */
      export function getIntersection(arr1, arr2) {
        // write code here
      }

  - name: index.test.js
    content: |
      import { getIntersection } from './index';

      test("should return the intersection of two arrays with numbers", () => {
          expect(getIntersection([1, 2, 3, 4], [3, 4, 5, 6])).toEqual([3, 4]);
        });

      test("should return the intersection of two arrays with strings", () => {
        expect(getIntersection(["apple", "banana", "cherry"], ["banana", "cherry", "date"])).toEqual(["banana", "cherry"]);
      });

      test("should return an empty array if there is no intersection", () => {
        expect(getIntersection([1, 2, 3], [4, 5, 6])).toEqual([]);
      });

      test("should handle arrays with duplicate elements", () => {
        expect(getIntersection([1, 1, 2, 2, 3], [2, 2, 3, 3, 4])).toEqual([2, 3]);
      });

      test("should handle arrays with different data types", () => {
        expect(getIntersection([1, "two", 3, true], [true, "two", 4, 5])).toEqual(["two", true]);
      });

      test("should return an empty array if one of the arrays is empty", () => {
        expect(getIntersection([], [1, 2, 3])).toEqual([]);
      });

      test("should return an empty array if both arrays are empty", () => {
        expect(getIntersection([], [])).toEqual([]);
      });
