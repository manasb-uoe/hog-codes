title: Implement range()
description: |
  Implement a function `range()` which has the following behaviour: 

  ```javascript
  for (let num of range(1, 4, 1)) {
    console.log(num)  
  }
  // 1
  // 2
  // 3

  for (let num of range(1, 4, 2)) {
    console.log(num)  
  }
  // 1
  // 3
  ```
  Note that you're not required to return an array, just something iterable is good enough. Try using a `generator` function instead of a simple `for-loop`.
category: JavaScript
tags: []
difficulty: easy
files:
  - name: index.js
    content: |
      /**
      * @param {integer} from
      * @param {integer} to
      * @param {integer} step
      */
      export function range(from, to, step=1) {
        // your code here
      }

  - name: index.test.js
    content: |
      import { range } from "./index";

      test("Generates a sequence from 3 to 7 with default step 1, excluding 7", () => {
        expect([...range(3, 7)]).toEqual([3, 4, 5, 6]);
      });

      test("Generates a sequence from -2 to 2 with default step 1, excluding 2", () => {
        expect([...range(-2, 2)]).toEqual([-2, -1, 0, 1]);
      });

      test("Generates a sequence with a custom step of 2", () => {
        expect([...range(2, 10, 2)]).toEqual([2, 4, 6, 8]);
      });

      test("Generates a sequence with a negative step", () => {
        expect([...range(10, 2, -2)]).toEqual([10, 8, 6, 4]);
      });

      test("Handles an empty range when step does not allow progression", () => {
        expect([...range(3, 7, -1)]).toEqual([]);
        expect([...range(7, 3, 1)]).toEqual([]);
      });
