title: Implement _.get()
description: |
  [_.get(object, path, [defaultValue])](https://lodash.com/docs/4.17.15#get) is a handy method to help retrieving data from an arbitrary object. if the resolved value from path is undefined, defaultValue is returned.

  &nbsp;

  Please create your own `get()`.

  ```javascript
  const obj = {
    a: {
      b: {
        c: [1,2,3]
      }
    }
  }

  get(obj, 'a.b.c') // [1,2,3]
  get(obj, 'a.b.c.0') // 1
  get(obj, 'a.b.c[1]') // 2
  get(obj, ['a', 'b', 'c', '2']) // 3
  get(obj, 'a.b.c[3]') // undefined
  get(obj, 'a.c', 'bfe') // 'bfe'
  ```
category: JavaScript
tags: [lodash]
difficulty: medium
files:
  - name: index.js
    content: |
      /**
      * @param {object} source
      * @param {string | string[]} path
      * @param {any} [defaultValue]
      * @return {any}
      */
      export function get(source, path, defaultValue = undefined) {
        // your code here
      }
  - name: index.test.js
    content: |
      import { get } from './index.js';

      // Ensure object property is correctly retrieved
      test('retrieves nested object properties', () => {
        let obj = { a: { b: { c: 'BFE' } } };
        expect(get(obj, 'a.b.c')).toBe('BFE');
      });

      // Ensure array indices are correctly handled
      test('retrieves array elements when using valid indices', () => {
        let obj = { a: { b: { c: ['BFE', 'DEV'] } } };
        expect(get(obj, 'a.b.c[0]')).toBe('BFE');
        expect(get(obj, 'a.b.c[1]')).toBe('DEV');
      });

      // Ensure array indices work with path as an array
      test('retrieves array elements with array path input', () => {
        let obj = { a: { b: { c: ['X', 'Y', 'Z'] } } };
        expect(get(obj, ['a', 'b', 'c', '2'])).toBe('Z');
      });

      // Ensure numeric strings as keys are handled correctly
      test('treats numeric keys as properties if not valid array indices', () => {
        let obj = { a: { c: { d: { '01': 'BFE' } } } };
        expect(get(obj, 'a.c.d.01')).toBe('BFE');
      });

      // Ensure it returns undefined for missing paths
      test('returns undefined for non-existent paths', () => {
        let obj = { a: { b: {} } };
        expect(get(obj, 'a.b.c')).toBeUndefined();
      });

      // Ensure default values are used when paths do not exist
      test('returns default value if path does not exist', () => {
        let obj = { a: { b: {} } };
        expect(get(obj, 'a.b.c', 'default')).toBe('default');
      });
