title: Implement _.partial()
description: |
  [_.partial()](https://lodash.com/docs/4.17.15#partial) creates a function that invokes `func` with `partials` prepended to the arguments it receives. This method is like `Function.prototype.bind` except it does not alter the `this` binding.

  &nbsp;

  Create your own `partial()`. 

  ```javascript
  const func = (...args) => args
  const func123 = partial(func, 1,2,3)
  func123(4) // [1,2,3,4]
  ```

  It should also support placeholder.

  ```javascript
  const _ = partial.placeholder
  const func1_3 = partial(func, 1, _, 3)
  func1_3(2,4) // [1,2,3,4]
  ```

  Please create your own `partial()`.
category: JavaScript
tags: [lodash]
difficulty: medium
files:
  - name: index.js
    content: |
      /**
      * @param {Function} func
      * @param {any[]} args
      * @returns {Function}
      */
      export function partial(func, ...args) {
        // your code here
      }
  - name: index.test.js
    content: |
      import { partial } from './index.js';
      const func = (...args) => args;

      test('basic partial application', () => {
          const func123 = partial(func, 1, 2, 3);
          expect(func123(4)).toEqual([1, 2, 3, 4]);
      });

      test('partial application with placeholder', () => {
          const _ = partial.placeholder;
          const func1_3 = partial(func, 1, _, 3);
          expect(func1_3(2, 4)).toEqual([1, 2, 3, 4]);
      });

      test('partial with multiple placeholders', () => {
          const _ = partial.placeholder;
          const func_2_4 = partial(func, _, 2, _, 4);
          expect(func_2_4(1, 3, 5)).toEqual([1, 2, 3, 4, 5]);
      });

      test('partial with no placeholders', () => {
          const func12 = partial(func, 1, 2);
          expect(func12(3, 4, 5)).toEqual([1, 2, 3, 4, 5]);
      });

      test('partial preserves this binding', () => {
          const obj = {
              value: 42,
              method(x) {
                  return [this.value, x];
              }
          };
          const boundMethod = partial(obj.method, 10);
          expect(boundMethod.call(obj)).toEqual([42, 10]);
      });
